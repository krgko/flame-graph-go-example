<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="422.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="405" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="405" > </text>
<g id="frames">
<g >
<title>indexbytebody (4 samples, 0.30%)</title><rect x="762.0" y="245" width="3.5" height="15.0" fill="rgb(235,213,6)" rx="2" ry="2" />
<text  x="765.02" y="255.5" ></text>
</g>
<g >
<title>internal/poll.(*fdMutex).rwunlock (1 samples, 0.07%)</title><rect x="16.1" y="213" width="0.9" height="15.0" fill="rgb(236,186,34)" rx="2" ry="2" />
<text  x="19.11" y="223.5" ></text>
</g>
<g >
<title>runtime.exitsyscall (1 samples, 0.07%)</title><rect x="466.8" y="213" width="0.9" height="15.0" fill="rgb(214,28,47)" rx="2" ry="2" />
<text  x="469.80" y="223.5" ></text>
</g>
<g >
<title>runtime.nanotime1 (2 samples, 0.15%)</title><rect x="1175.2" y="293" width="1.7" height="15.0" fill="rgb(251,60,50)" rx="2" ry="2" />
<text  x="1178.15" y="303.5" ></text>
</g>
<g >
<title>bytes.IndexByte (4 samples, 0.30%)</title><rect x="762.0" y="261" width="3.5" height="15.0" fill="rgb(241,166,9)" rx="2" ry="2" />
<text  x="765.02" y="271.5" ></text>
</g>
<g >
<title>runtime.runqsteal (6 samples, 0.44%)</title><rect x="1169.0" y="277" width="5.3" height="15.0" fill="rgb(254,188,7)" rx="2" ry="2" />
<text  x="1172.04" y="287.5" ></text>
</g>
<g >
<title>runtime.systemstack (1 samples, 0.07%)</title><rect x="745.4" y="85" width="0.9" height="15.0" fill="rgb(217,3,30)" rx="2" ry="2" />
<text  x="748.43" y="95.5" ></text>
</g>
<g >
<title>net.ipEmptyString (1 samples, 0.07%)</title><rect x="761.1" y="213" width="0.9" height="15.0" fill="rgb(230,9,9)" rx="2" ry="2" />
<text  x="764.15" y="223.5" ></text>
</g>
<g >
<title>runtime.libcCall (6 samples, 0.44%)</title><rect x="746.3" y="117" width="5.2" height="15.0" fill="rgb(237,66,49)" rx="2" ry="2" />
<text  x="749.30" y="127.5" ></text>
</g>
<g >
<title>os.(*File).write (283 samples, 20.95%)</title><rect x="504.4" y="181" width="247.1" height="15.0" fill="rgb(252,137,22)" rx="2" ry="2" />
<text  x="507.36" y="191.5" >os.(*File).write</text>
</g>
<g >
<title>log.Printf (302 samples, 22.35%)</title><rect x="497.4" y="213" width="263.7" height="15.0" fill="rgb(218,215,16)" rx="2" ry="2" />
<text  x="500.37" y="223.5" >log.Printf</text>
</g>
<g >
<title>internal/poll.(*pollDesc).prepare (1 samples, 0.07%)</title><rect x="321.8" y="245" width="0.9" height="15.0" fill="rgb(221,13,20)" rx="2" ry="2" />
<text  x="324.81" y="255.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).parseFirstLine (1 samples, 0.07%)</title><rect x="10.9" y="261" width="0.8" height="15.0" fill="rgb(244,155,4)" rx="2" ry="2" />
<text  x="13.87" y="271.5" ></text>
</g>
<g >
<title>runtime.libcCall (1 samples, 0.07%)</title><rect x="1174.3" y="261" width="0.9" height="15.0" fill="rgb(254,126,23)" rx="2" ry="2" />
<text  x="1177.28" y="271.5" ></text>
</g>
<g >
<title>internal/itoa.Itoa (1 samples, 0.07%)</title><rect x="498.2" y="117" width="0.9" height="15.0" fill="rgb(224,62,45)" rx="2" ry="2" />
<text  x="501.25" y="127.5" ></text>
</g>
<g >
<title>indexbytebody (1 samples, 0.07%)</title><rect x="10.0" y="245" width="0.9" height="15.0" fill="rgb(249,10,37)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>runtime.kevent (249 samples, 18.43%)</title><rect x="947.2" y="277" width="217.5" height="15.0" fill="rgb(209,3,28)" rx="2" ry="2" />
<text  x="950.19" y="287.5" >runtime.kevent</text>
</g>
<g >
<title>bufio.(*Writer).Flush (201 samples, 14.88%)</title><rect x="319.2" y="309" width="175.6" height="15.0" fill="rgb(235,117,10)" rx="2" ry="2" />
<text  x="322.19" y="319.5" >bufio.(*Writer).Flush</text>
</g>
<g >
<title>runtime.memhash64 (1 samples, 0.07%)</title><rect x="769.9" y="229" width="0.9" height="15.0" fill="rgb(237,142,4)" rx="2" ry="2" />
<text  x="772.88" y="239.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_unlock (2 samples, 0.15%)</title><rect x="314.8" y="101" width="1.8" height="15.0" fill="rgb(221,88,39)" rx="2" ry="2" />
<text  x="317.83" y="111.5" ></text>
</g>
<g >
<title>runtime.mcall (463 samples, 34.27%)</title><rect x="776.0" y="357" width="404.4" height="15.0" fill="rgb(237,175,28)" rx="2" ry="2" />
<text  x="779.00" y="367.5" >runtime.mcall</text>
</g>
<g >
<title>runtime.pthread_cond_wait (141 samples, 10.44%)</title><rect x="820.5" y="245" width="123.2" height="15.0" fill="rgb(232,86,27)" rx="2" ry="2" />
<text  x="823.54" y="255.5" >runtime.pthread..</text>
</g>
<g >
<title>runtime.pthread_mutex_lock (1 samples, 0.07%)</title><rect x="819.7" y="229" width="0.8" height="15.0" fill="rgb(242,48,35)" rx="2" ry="2" />
<text  x="822.67" y="239.5" ></text>
</g>
<g >
<title>runtime.osyield (1 samples, 0.07%)</title><rect x="1174.3" y="293" width="0.9" height="15.0" fill="rgb(221,166,40)" rx="2" ry="2" />
<text  x="1177.28" y="303.5" ></text>
</g>
<g >
<title>runtime.lockWithRank (1 samples, 0.07%)</title><rect x="1174.3" y="309" width="0.9" height="15.0" fill="rgb(222,68,31)" rx="2" ry="2" />
<text  x="1177.28" y="319.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).Read (3 samples, 0.22%)</title><rect x="10.0" y="325" width="2.6" height="15.0" fill="rgb(245,106,46)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>runtime.libcCall (2 samples, 0.15%)</title><rect x="314.8" y="85" width="1.8" height="15.0" fill="rgb(210,101,39)" rx="2" ry="2" />
<text  x="317.83" y="95.5" ></text>
</g>
<g >
<title>log.(*Logger).Output (288 samples, 21.32%)</title><rect x="501.7" y="197" width="251.6" height="15.0" fill="rgb(241,67,11)" rx="2" ry="2" />
<text  x="504.74" y="207.5" >log.(*Logger).Output</text>
</g>
<g >
<title>runtime.wakep (4 samples, 0.30%)</title><rect x="1176.9" y="293" width="3.5" height="15.0" fill="rgb(211,137,31)" rx="2" ry="2" />
<text  x="1179.90" y="303.5" ></text>
</g>
<g >
<title>runtime.netpoll (252 samples, 18.65%)</title><rect x="945.4" y="293" width="220.1" height="15.0" fill="rgb(226,121,41)" rx="2" ry="2" />
<text  x="948.44" y="303.5" >runtime.netpoll</text>
</g>
<g >
<title>runtime.reentersyscall (2 samples, 0.15%)</title><rect x="314.8" y="181" width="1.8" height="15.0" fill="rgb(236,59,39)" rx="2" ry="2" />
<text  x="317.83" y="191.5" ></text>
</g>
<g >
<title>github.com/gofiber/fiber/v2.(*App).handler (311 samples, 23.02%)</title><rect x="494.8" y="309" width="271.6" height="15.0" fill="rgb(223,19,29)" rx="2" ry="2" />
<text  x="497.75" y="319.5" >github.com/gofiber/fiber/v2.(*App).h..</text>
</g>
<g >
<title>runtime.typehash (1 samples, 0.07%)</title><rect x="769.9" y="245" width="0.9" height="15.0" fill="rgb(230,12,24)" rx="2" ry="2" />
<text  x="772.88" y="255.5" ></text>
</g>
<g >
<title>runtime.semawakeup (4 samples, 0.30%)</title><rect x="1176.9" y="245" width="3.5" height="15.0" fill="rgb(215,90,30)" rx="2" ry="2" />
<text  x="1179.90" y="255.5" ></text>
</g>
<g >
<title>runtime.notesleep (143 samples, 10.58%)</title><rect x="820.5" y="277" width="124.9" height="15.0" fill="rgb(207,178,5)" rx="2" ry="2" />
<text  x="823.54" y="287.5" >runtime.notesleep</text>
</g>
<g >
<title>github.com/valyala/fasthttp.AppendUint (3 samples, 0.22%)</title><rect x="771.6" y="293" width="2.6" height="15.0" fill="rgb(237,62,14)" rx="2" ry="2" />
<text  x="774.63" y="303.5" ></text>
</g>
<g >
<title>runtime.notewakeup (4 samples, 0.30%)</title><rect x="1176.9" y="261" width="3.5" height="15.0" fill="rgb(209,86,17)" rx="2" ry="2" />
<text  x="1179.90" y="271.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (8 samples, 0.59%)</title><rect x="1183.0" y="245" width="7.0" height="15.0" fill="rgb(210,70,12)" rx="2" ry="2" />
<text  x="1186.01" y="255.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast_pidle (1 samples, 0.07%)</title><rect x="745.4" y="53" width="0.9" height="15.0" fill="rgb(206,121,47)" rx="2" ry="2" />
<text  x="748.43" y="63.5" ></text>
</g>
<g >
<title>runtime.preemptall (1 samples, 0.07%)</title><rect x="1182.1" y="309" width="0.9" height="15.0" fill="rgb(211,78,43)" rx="2" ry="2" />
<text  x="1185.14" y="319.5" ></text>
</g>
<g >
<title>runtime.pthread_kill (1 samples, 0.07%)</title><rect x="1182.1" y="261" width="0.9" height="15.0" fill="rgb(241,30,37)" rx="2" ry="2" />
<text  x="1185.14" y="271.5" ></text>
</g>
<g >
<title>runtime.semawakeup (8 samples, 0.59%)</title><rect x="1183.0" y="261" width="7.0" height="15.0" fill="rgb(229,35,40)" rx="2" ry="2" />
<text  x="1186.01" y="271.5" ></text>
</g>
<g >
<title>runtime.forEachP (1 samples, 0.07%)</title><rect x="1182.1" y="325" width="0.9" height="15.0" fill="rgb(228,23,25)" rx="2" ry="2" />
<text  x="1185.14" y="335.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*workerPool).workerFunc (875 samples, 64.77%)</title><rect x="10.0" y="341" width="764.2" height="15.0" fill="rgb(233,11,32)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >github.com/valyala/fasthttp.(*workerPool).workerFunc</text>
</g>
<g >
<title>runtime.slicebytetostring (1 samples, 0.07%)</title><rect x="761.1" y="181" width="0.9" height="15.0" fill="rgb(253,161,3)" rx="2" ry="2" />
<text  x="764.15" y="191.5" ></text>
</g>
<g >
<title>runtime.libcCall (44 samples, 3.26%)</title><rect x="905.3" y="229" width="38.4" height="15.0" fill="rgb(235,24,0)" rx="2" ry="2" />
<text  x="908.26" y="239.5" >run..</text>
</g>
<g >
<title>github.com/valyala/fasthttp.parseHost (1 samples, 0.07%)</title><rect x="765.5" y="245" width="0.9" height="15.0" fill="rgb(219,112,35)" rx="2" ry="2" />
<text  x="768.51" y="255.5" ></text>
</g>
<g >
<title>runtime.libcCall (74 samples, 5.48%)</title><rect x="1100.0" y="261" width="64.7" height="15.0" fill="rgb(206,122,26)" rx="2" ry="2" />
<text  x="1103.04" y="271.5" >runtime..</text>
</g>
<g >
<title>runtime.exitsyscallfast (1 samples, 0.07%)</title><rect x="745.4" y="101" width="0.9" height="15.0" fill="rgb(253,54,3)" rx="2" ry="2" />
<text  x="748.43" y="111.5" ></text>
</g>
<g >
<title>runtime.exitsyscall (1 samples, 0.07%)</title><rect x="745.4" y="117" width="0.9" height="15.0" fill="rgb(229,208,39)" rx="2" ry="2" />
<text  x="748.43" y="127.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).readUnlock (1 samples, 0.07%)</title><rect x="16.1" y="229" width="0.9" height="15.0" fill="rgb(241,171,37)" rx="2" ry="2" />
<text  x="19.11" y="239.5" ></text>
</g>
<g >
<title>runtime.startm (48 samples, 3.55%)</title><rect x="778.6" y="277" width="41.9" height="15.0" fill="rgb(208,119,29)" rx="2" ry="2" />
<text  x="781.62" y="287.5" >run..</text>
</g>
<g >
<title>runtime.asmcgocall (1 samples, 0.07%)</title><rect x="774.2" y="357" width="0.9" height="15.0" fill="rgb(208,159,35)" rx="2" ry="2" />
<text  x="777.25" y="367.5" ></text>
</g>
<g >
<title>sync.runtime_doSpin (8 samples, 0.59%)</title><rect x="754.2" y="165" width="6.9" height="15.0" fill="rgb(223,9,14)" rx="2" ry="2" />
<text  x="757.16" y="175.5" ></text>
</g>
<g >
<title>syscall.syscall (197 samples, 14.58%)</title><rect x="322.7" y="229" width="172.1" height="15.0" fill="rgb(249,43,33)" rx="2" ry="2" />
<text  x="325.69" y="239.5" >syscall.syscall</text>
</g>
<g >
<title>runtime.slicebytetostring (2 samples, 0.15%)</title><rect x="499.1" y="101" width="1.8" height="15.0" fill="rgb(232,9,11)" rx="2" ry="2" />
<text  x="502.12" y="111.5" ></text>
</g>
<g >
<title>sync.(*Mutex).lockSlow (9 samples, 0.67%)</title><rect x="753.3" y="181" width="7.8" height="15.0" fill="rgb(214,29,31)" rx="2" ry="2" />
<text  x="756.29" y="191.5" ></text>
</g>
<g >
<title>bytes.IndexByte (1 samples, 0.07%)</title><rect x="11.7" y="245" width="0.9" height="15.0" fill="rgb(228,177,39)" rx="2" ry="2" />
<text  x="14.75" y="255.5" ></text>
</g>
<g >
<title>internal/poll.(*pollDesc).prepareWrite (1 samples, 0.07%)</title><rect x="321.8" y="261" width="0.9" height="15.0" fill="rgb(236,134,1)" rx="2" ry="2" />
<text  x="324.81" y="271.5" ></text>
</g>
<g >
<title>runtime.acquirep (1 samples, 0.07%)</title><rect x="745.4" y="37" width="0.9" height="15.0" fill="rgb(237,44,46)" rx="2" ry="2" />
<text  x="748.43" y="47.5" ></text>
</g>
<g >
<title>runtime.nanotime1 (2 samples, 0.15%)</title><rect x="1167.3" y="261" width="1.7" height="15.0" fill="rgb(248,210,1)" rx="2" ry="2" />
<text  x="1170.29" y="271.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).tryRead (3 samples, 0.22%)</title><rect x="10.0" y="293" width="2.6" height="15.0" fill="rgb(217,167,47)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>runtime.releasep (1 samples, 0.07%)</title><rect x="1166.4" y="293" width="0.9" height="15.0" fill="rgb(244,201,9)" rx="2" ry="2" />
<text  x="1169.42" y="303.5" ></text>
</g>
<g >
<title>runtime.park_m (463 samples, 34.27%)</title><rect x="776.0" y="341" width="404.4" height="15.0" fill="rgb(237,222,4)" rx="2" ry="2" />
<text  x="779.00" y="351.5" >runtime.park_m</text>
</g>
<g >
<title>sync.(*Mutex).Lock (9 samples, 0.67%)</title><rect x="753.3" y="197" width="7.8" height="15.0" fill="rgb(252,146,2)" rx="2" ry="2" />
<text  x="756.29" y="207.5" ></text>
</g>
<g >
<title>runtime.entersyscall_sysmon (2 samples, 0.15%)</title><rect x="314.8" y="149" width="1.8" height="15.0" fill="rgb(223,137,3)" rx="2" ry="2" />
<text  x="317.83" y="159.5" ></text>
</g>
<g >
<title>syscall.Read (346 samples, 25.61%)</title><rect x="17.0" y="245" width="302.2" height="15.0" fill="rgb(250,81,16)" rx="2" ry="2" />
<text  x="19.99" y="255.5" >syscall.Read</text>
</g>
<g >
<title>syscall.write (283 samples, 20.95%)</title><rect x="504.4" y="149" width="247.1" height="15.0" fill="rgb(216,185,51)" rx="2" ry="2" />
<text  x="507.36" y="159.5" >syscall.write</text>
</g>
<g >
<title>runtime.startm (8 samples, 0.59%)</title><rect x="1183.0" y="293" width="7.0" height="15.0" fill="rgb(218,15,8)" rx="2" ry="2" />
<text  x="1186.01" y="303.5" ></text>
</g>
<g >
<title>runtime.notewakeup (2 samples, 0.15%)</title><rect x="314.8" y="133" width="1.8" height="15.0" fill="rgb(208,167,54)" rx="2" ry="2" />
<text  x="317.83" y="143.5" ></text>
</g>
<g >
<title>bytes.IndexByte (1 samples, 0.07%)</title><rect x="10.0" y="261" width="0.9" height="15.0" fill="rgb(229,130,49)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>runtime.libcCall (1 samples, 0.07%)</title><rect x="818.8" y="213" width="0.9" height="15.0" fill="rgb(241,198,3)" rx="2" ry="2" />
<text  x="821.79" y="223.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Response).Write (4 samples, 0.30%)</title><rect x="770.8" y="309" width="3.4" height="15.0" fill="rgb(251,188,25)" rx="2" ry="2" />
<text  x="773.75" y="319.5" ></text>
</g>
<g >
<title>runtime.notewakeup (8 samples, 0.59%)</title><rect x="1183.0" y="277" width="7.0" height="15.0" fill="rgb(205,66,43)" rx="2" ry="2" />
<text  x="1186.01" y="287.5" ></text>
</g>
<g >
<title>syscall.syscall (283 samples, 20.95%)</title><rect x="504.4" y="133" width="247.1" height="15.0" fill="rgb(229,7,0)" rx="2" ry="2" />
<text  x="507.36" y="143.5" >syscall.syscall</text>
</g>
<g >
<title>runtime.mapassign (1 samples, 0.07%)</title><rect x="768.1" y="277" width="0.9" height="15.0" fill="rgb(228,182,0)" rx="2" ry="2" />
<text  x="771.13" y="287.5" ></text>
</g>
<g >
<title>runtime.systemstack (11 samples, 0.81%)</title><rect x="1180.4" y="357" width="9.6" height="15.0" fill="rgb(231,43,23)" rx="2" ry="2" />
<text  x="1183.39" y="367.5" ></text>
</g>
<g >
<title>syscall.read (346 samples, 25.61%)</title><rect x="17.0" y="229" width="302.2" height="15.0" fill="rgb(219,200,11)" rx="2" ry="2" />
<text  x="19.99" y="239.5" >syscall.read</text>
</g>
<g >
<title>net.IP.String (1 samples, 0.07%)</title><rect x="761.1" y="197" width="0.9" height="15.0" fill="rgb(242,67,2)" rx="2" ry="2" />
<text  x="764.15" y="207.5" ></text>
</g>
<g >
<title>net.ipEmptyString (2 samples, 0.15%)</title><rect x="499.1" y="133" width="1.8" height="15.0" fill="rgb(235,25,40)" rx="2" ry="2" />
<text  x="502.12" y="143.5" ></text>
</g>
<g >
<title>time.Now (2 samples, 0.15%)</title><rect x="751.5" y="181" width="1.8" height="15.0" fill="rgb(253,20,3)" rx="2" ry="2" />
<text  x="754.54" y="191.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestCtx).RemoteAddr (1 samples, 0.07%)</title><rect x="496.5" y="213" width="0.9" height="15.0" fill="rgb(248,145,25)" rx="2" ry="2" />
<text  x="499.50" y="223.5" ></text>
</g>
<g >
<title>runtime.usleep (6 samples, 0.44%)</title><rect x="1169.0" y="245" width="5.3" height="15.0" fill="rgb(227,15,52)" rx="2" ry="2" />
<text  x="1172.04" y="255.5" ></text>
</g>
<g >
<title>runtime.interhash (1 samples, 0.07%)</title><rect x="769.9" y="261" width="0.9" height="15.0" fill="rgb(222,33,28)" rx="2" ry="2" />
<text  x="772.88" y="271.5" ></text>
</g>
<g >
<title>runtime.nanotime (2 samples, 0.15%)</title><rect x="1175.2" y="309" width="1.7" height="15.0" fill="rgb(218,21,53)" rx="2" ry="2" />
<text  x="1178.15" y="319.5" ></text>
</g>
<g >
<title>github.com/gofiber/fiber/v2.(*App).next (305 samples, 22.58%)</title><rect x="495.6" y="245" width="266.4" height="15.0" fill="rgb(241,195,5)" rx="2" ry="2" />
<text  x="498.63" y="255.5" >github.com/gofiber/fiber/v2.(*App)...</text>
</g>
<g >
<title>fmt.(*pp).printArg (4 samples, 0.30%)</title><rect x="498.2" y="165" width="3.5" height="15.0" fill="rgb(211,120,15)" rx="2" ry="2" />
<text  x="501.25" y="175.5" ></text>
</g>
<g >
<title>runtime.wakep (8 samples, 0.59%)</title><rect x="1183.0" y="309" width="7.0" height="15.0" fill="rgb(216,102,52)" rx="2" ry="2" />
<text  x="1186.01" y="319.5" ></text>
</g>
<g >
<title>runtime.schedule (463 samples, 34.27%)</title><rect x="776.0" y="325" width="404.4" height="15.0" fill="rgb(254,83,4)" rx="2" ry="2" />
<text  x="779.00" y="335.5" >runtime.schedule</text>
</g>
<g >
<title>net.(*TCPConn).Read (1 samples, 0.07%)</title><rect x="12.6" y="277" width="0.9" height="15.0" fill="rgb(253,75,29)" rx="2" ry="2" />
<text  x="15.62" y="287.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*workerPool).getCh.func1 (875 samples, 64.77%)</title><rect x="10.0" y="357" width="764.2" height="15.0" fill="rgb(248,23,6)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >github.com/valyala/fasthttp.(*workerPool).getCh.func1</text>
</g>
<g >
<title>github.com/gofiber/fiber/v2/middleware/pprof.New.func1 (305 samples, 22.58%)</title><rect x="495.6" y="277" width="266.4" height="15.0" fill="rgb(239,187,32)" rx="2" ry="2" />
<text  x="498.63" y="287.5" >github.com/gofiber/fiber/v2/middlew..</text>
</g>
<g >
<title>net.(*conn).Write (200 samples, 14.80%)</title><rect x="320.1" y="293" width="174.7" height="15.0" fill="rgb(208,212,10)" rx="2" ry="2" />
<text  x="323.07" y="303.5" >net.(*conn).Write</text>
</g>
<g >
<title>runtime.semawakeup (2 samples, 0.15%)</title><rect x="314.8" y="117" width="1.8" height="15.0" fill="rgb(212,69,28)" rx="2" ry="2" />
<text  x="317.83" y="127.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (4 samples, 0.30%)</title><rect x="1176.9" y="229" width="3.5" height="15.0" fill="rgb(254,74,2)" rx="2" ry="2" />
<text  x="1179.90" y="239.5" ></text>
</g>
<g >
<title>runtime.stealWork (8 samples, 0.59%)</title><rect x="1167.3" y="293" width="7.0" height="15.0" fill="rgb(251,116,18)" rx="2" ry="2" />
<text  x="1170.29" y="303.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).Write (1 samples, 0.07%)</title><rect x="320.9" y="261" width="0.9" height="15.0" fill="rgb(227,37,52)" rx="2" ry="2" />
<text  x="323.94" y="271.5" ></text>
</g>
<g >
<title>runtime.preemptone (1 samples, 0.07%)</title><rect x="1182.1" y="293" width="0.9" height="15.0" fill="rgb(234,104,2)" rx="2" ry="2" />
<text  x="1185.14" y="303.5" ></text>
</g>
<g >
<title>indexbytebody (1 samples, 0.07%)</title><rect x="11.7" y="229" width="0.9" height="15.0" fill="rgb(224,224,49)" rx="2" ry="2" />
<text  x="14.75" y="239.5" ></text>
</g>
<g >
<title>all (1,351 samples, 100%)</title><rect x="10.0" y="373" width="1180.0" height="15.0" fill="rgb(228,123,45)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>net.(*TCPAddr).String (1 samples, 0.07%)</title><rect x="498.2" y="133" width="0.9" height="15.0" fill="rgb(252,34,34)" rx="2" ry="2" />
<text  x="501.25" y="143.5" ></text>
</g>
<g >
<title>runtime.notewakeup (2 samples, 0.15%)</title><rect x="1180.4" y="325" width="1.7" height="15.0" fill="rgb(217,8,7)" rx="2" ry="2" />
<text  x="1183.39" y="335.5" ></text>
</g>
<g >
<title>indexbytebody (1 samples, 0.07%)</title><rect x="10.9" y="229" width="0.8" height="15.0" fill="rgb(232,120,28)" rx="2" ry="2" />
<text  x="13.87" y="239.5" ></text>
</g>
<g >
<title>runtime.semawakeup (2 samples, 0.15%)</title><rect x="1180.4" y="309" width="1.7" height="15.0" fill="rgb(253,66,38)" rx="2" ry="2" />
<text  x="1183.39" y="319.5" ></text>
</g>
<g >
<title>runtime.exitsyscallfast.func1 (1 samples, 0.07%)</title><rect x="745.4" y="69" width="0.9" height="15.0" fill="rgb(217,67,17)" rx="2" ry="2" />
<text  x="748.43" y="79.5" ></text>
</g>
<g >
<title>runtime.bgscavenge (1 samples, 0.07%)</title><rect x="775.1" y="357" width="0.9" height="15.0" fill="rgb(222,163,16)" rx="2" ry="2" />
<text  x="778.12" y="367.5" ></text>
</g>
<g >
<title>runtime.cansemacquire (1 samples, 0.07%)</title><rect x="753.3" y="149" width="0.9" height="15.0" fill="rgb(234,150,43)" rx="2" ry="2" />
<text  x="756.29" y="159.5" ></text>
</g>
<g >
<title>runtime.usleep (1 samples, 0.07%)</title><rect x="1174.3" y="277" width="0.9" height="15.0" fill="rgb(212,31,6)" rx="2" ry="2" />
<text  x="1177.28" y="287.5" ></text>
</g>
<g >
<title>runtime.runqgrab (6 samples, 0.44%)</title><rect x="1169.0" y="261" width="5.3" height="15.0" fill="rgb(239,222,51)" rx="2" ry="2" />
<text  x="1172.04" y="271.5" ></text>
</g>
<g >
<title>fmt.(*pp).handleMethods (4 samples, 0.30%)</title><rect x="498.2" y="149" width="3.5" height="15.0" fill="rgb(228,21,20)" rx="2" ry="2" />
<text  x="501.25" y="159.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*URI).parse (1 samples, 0.07%)</title><rect x="765.5" y="261" width="0.9" height="15.0" fill="rgb(236,35,38)" rx="2" ry="2" />
<text  x="768.51" y="271.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.writeResponse (4 samples, 0.30%)</title><rect x="770.8" y="325" width="3.4" height="15.0" fill="rgb(239,105,47)" rx="2" ry="2" />
<text  x="773.75" y="335.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).parseHeaders (1 samples, 0.07%)</title><rect x="11.7" y="261" width="0.9" height="15.0" fill="rgb(223,7,38)" rx="2" ry="2" />
<text  x="14.75" y="271.5" ></text>
</g>
<g >
<title>runtime.procyield (7 samples, 0.52%)</title><rect x="755.0" y="149" width="6.1" height="15.0" fill="rgb(209,94,39)" rx="2" ry="2" />
<text  x="758.03" y="159.5" ></text>
</g>
<g >
<title>runtime.pthread_mutex_lock (2 samples, 0.15%)</title><rect x="943.7" y="245" width="1.7" height="15.0" fill="rgb(229,202,52)" rx="2" ry="2" />
<text  x="946.69" y="255.5" ></text>
</g>
<g >
<title>runtime.injectglist.func1 (48 samples, 3.55%)</title><rect x="778.6" y="293" width="41.9" height="15.0" fill="rgb(241,186,27)" rx="2" ry="2" />
<text  x="781.62" y="303.5" >run..</text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Response).resetSkipHeader (1 samples, 0.07%)</title><rect x="767.3" y="309" width="0.8" height="15.0" fill="rgb(245,200,15)" rx="2" ry="2" />
<text  x="770.26" y="319.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Server).serveConn (868 samples, 64.25%)</title><rect x="12.6" y="325" width="758.2" height="15.0" fill="rgb(228,183,27)" rx="2" ry="2" />
<text  x="15.62" y="335.5" >github.com/valyala/fasthttp.(*Server).serveConn</text>
</g>
<g >
<title>runtime.mapdelete (2 samples, 0.15%)</title><rect x="769.0" y="277" width="1.8" height="15.0" fill="rgb(247,26,27)" rx="2" ry="2" />
<text  x="772.01" y="287.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Response).ResetBody (1 samples, 0.07%)</title><rect x="767.3" y="293" width="0.8" height="15.0" fill="rgb(252,3,33)" rx="2" ry="2" />
<text  x="770.26" y="303.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Request).parseURI (5 samples, 0.37%)</title><rect x="762.0" y="277" width="4.4" height="15.0" fill="rgb(214,218,50)" rx="2" ry="2" />
<text  x="765.02" y="287.5" ></text>
</g>
<g >
<title>sync.runtime_SemacquireMutex (1 samples, 0.07%)</title><rect x="753.3" y="165" width="0.9" height="15.0" fill="rgb(209,134,41)" rx="2" ry="2" />
<text  x="756.29" y="175.5" ></text>
</g>
<g >
<title>github.com/gofiber/fiber/v2.(*App).next (305 samples, 22.58%)</title><rect x="495.6" y="293" width="266.4" height="15.0" fill="rgb(219,209,44)" rx="2" ry="2" />
<text  x="498.63" y="303.5" >github.com/gofiber/fiber/v2.(*App)...</text>
</g>
<g >
<title>fmt.(*pp).doPrintf (5 samples, 0.37%)</title><rect x="497.4" y="181" width="4.3" height="15.0" fill="rgb(249,184,38)" rx="2" ry="2" />
<text  x="500.37" y="191.5" ></text>
</g>
<g >
<title>runtime.libcCall (31 samples, 2.29%)</title><rect x="467.7" y="213" width="27.1" height="15.0" fill="rgb(206,64,47)" rx="2" ry="2" />
<text  x="470.68" y="223.5" >r..</text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).readLoop (3 samples, 0.22%)</title><rect x="10.0" y="309" width="2.6" height="15.0" fill="rgb(224,84,37)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>runtime.ready (8 samples, 0.59%)</title><rect x="1183.0" y="325" width="7.0" height="15.0" fill="rgb(243,194,11)" rx="2" ry="2" />
<text  x="1186.01" y="335.5" ></text>
</g>
<g >
<title>internal/poll.(*FD).Read (3 samples, 0.22%)</title><rect x="14.4" y="245" width="2.6" height="15.0" fill="rgb(240,182,38)" rx="2" ry="2" />
<text  x="17.37" y="255.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*ResponseHeader).SetContentLength (1 samples, 0.07%)</title><rect x="770.8" y="293" width="0.8" height="15.0" fill="rgb(252,24,21)" rx="2" ry="2" />
<text  x="773.75" y="303.5" ></text>
</g>
<g >
<title>runtime.startm (4 samples, 0.30%)</title><rect x="1176.9" y="277" width="3.5" height="15.0" fill="rgb(214,48,40)" rx="2" ry="2" />
<text  x="1179.90" y="287.5" ></text>
</g>
<g >
<title>runtime.signalM (1 samples, 0.07%)</title><rect x="1182.1" y="277" width="0.9" height="15.0" fill="rgb(254,15,45)" rx="2" ry="2" />
<text  x="1185.14" y="287.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (2 samples, 0.15%)</title><rect x="1180.4" y="293" width="1.7" height="15.0" fill="rgb(254,203,46)" rx="2" ry="2" />
<text  x="1183.39" y="303.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Server).trackConn (3 samples, 0.22%)</title><rect x="768.1" y="293" width="2.7" height="15.0" fill="rgb(214,80,13)" rx="2" ry="2" />
<text  x="771.13" y="303.5" ></text>
</g>
<g >
<title>runtime.walltime (2 samples, 0.15%)</title><rect x="751.5" y="149" width="1.8" height="15.0" fill="rgb(221,56,14)" rx="2" ry="2" />
<text  x="754.54" y="159.5" ></text>
</g>
<g >
<title>runtime.systemstack (2 samples, 0.15%)</title><rect x="314.8" y="165" width="1.8" height="15.0" fill="rgb(243,131,25)" rx="2" ry="2" />
<text  x="317.83" y="175.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Request).readLimitBody (1 samples, 0.07%)</title><rect x="766.4" y="309" width="0.9" height="15.0" fill="rgb(239,71,10)" rx="2" ry="2" />
<text  x="769.39" y="319.5" ></text>
</g>
<g >
<title>net.IP.String (2 samples, 0.15%)</title><rect x="499.1" y="117" width="1.8" height="15.0" fill="rgb(232,30,42)" rx="2" ry="2" />
<text  x="502.12" y="127.5" ></text>
</g>
<g >
<title>runtime.gcMarkDone.func1 (1 samples, 0.07%)</title><rect x="1182.1" y="341" width="0.9" height="15.0" fill="rgb(218,74,12)" rx="2" ry="2" />
<text  x="1185.14" y="351.5" ></text>
</g>
<g >
<title>fmt.Sprintf (5 samples, 0.37%)</title><rect x="497.4" y="197" width="4.3" height="15.0" fill="rgb(243,46,41)" rx="2" ry="2" />
<text  x="500.37" y="207.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Server).setState (3 samples, 0.22%)</title><rect x="768.1" y="309" width="2.7" height="15.0" fill="rgb(241,196,3)" rx="2" ry="2" />
<text  x="771.13" y="319.5" ></text>
</g>
<g >
<title>runtime.resetspinning (4 samples, 0.30%)</title><rect x="1176.9" y="309" width="3.5" height="15.0" fill="rgb(234,150,28)" rx="2" ry="2" />
<text  x="1179.90" y="319.5" ></text>
</g>
<g >
<title>net.(*netFD).Read (350 samples, 25.91%)</title><rect x="13.5" y="261" width="305.7" height="15.0" fill="rgb(229,189,17)" rx="2" ry="2" />
<text  x="16.49" y="271.5" >net.(*netFD).Read</text>
</g>
<g >
<title>time.now (2 samples, 0.15%)</title><rect x="751.5" y="165" width="1.8" height="15.0" fill="rgb(238,72,47)" rx="2" ry="2" />
<text  x="754.54" y="175.5" ></text>
</g>
<g >
<title>syscall.Write (283 samples, 20.95%)</title><rect x="504.4" y="165" width="247.1" height="15.0" fill="rgb(213,55,13)" rx="2" ry="2" />
<text  x="507.36" y="175.5" >syscall.Write</text>
</g>
<g >
<title>net.(*conn).Read (350 samples, 25.91%)</title><rect x="13.5" y="277" width="305.7" height="15.0" fill="rgb(235,149,44)" rx="2" ry="2" />
<text  x="16.49" y="287.5" >net.(*conn).Read</text>
</g>
<g >
<title>runtime.entersyscall_sysmon (2 samples, 0.15%)</title><rect x="1180.4" y="341" width="1.7" height="15.0" fill="rgb(222,126,18)" rx="2" ry="2" />
<text  x="1183.39" y="351.5" ></text>
</g>
<g >
<title>bufio.(*Reader).fill (351 samples, 25.98%)</title><rect x="12.6" y="293" width="306.6" height="15.0" fill="rgb(249,89,40)" rx="2" ry="2" />
<text  x="15.62" y="303.5" >bufio.(*Reader).fill</text>
</g>
<g >
<title>runtime/internal/atomic.(*Uintptr).CompareAndSwap (1 samples, 0.07%)</title><rect x="1164.7" y="277" width="0.8" height="15.0" fill="rgb(241,175,23)" rx="2" ry="2" />
<text  x="1167.67" y="287.5" ></text>
</g>
<g >
<title>bufio.(*Reader).Peek (351 samples, 25.98%)</title><rect x="12.6" y="309" width="306.6" height="15.0" fill="rgb(249,10,46)" rx="2" ry="2" />
<text  x="15.62" y="319.5" >bufio.(*Reader).Peek</text>
</g>
<g >
<title>runtime.notewakeup (48 samples, 3.55%)</title><rect x="778.6" y="261" width="41.9" height="15.0" fill="rgb(220,27,45)" rx="2" ry="2" />
<text  x="781.62" y="271.5" >run..</text>
</g>
<g >
<title>runtime.pidleput (1 samples, 0.07%)</title><rect x="1165.5" y="293" width="0.9" height="15.0" fill="rgb(219,147,48)" rx="2" ry="2" />
<text  x="1168.54" y="303.5" ></text>
</g>
<g >
<title>runtime.pthread_cond_signal (47 samples, 3.48%)</title><rect x="778.6" y="229" width="41.1" height="15.0" fill="rgb(214,124,1)" rx="2" ry="2" />
<text  x="781.62" y="239.5" >run..</text>
</g>
<g >
<title>log.itoa (2 samples, 0.15%)</title><rect x="502.6" y="181" width="1.8" height="15.0" fill="rgb(221,178,15)" rx="2" ry="2" />
<text  x="505.61" y="191.5" ></text>
</g>
<g >
<title>runtime.entersyscall (2 samples, 0.15%)</title><rect x="314.8" y="197" width="1.8" height="15.0" fill="rgb(223,109,28)" rx="2" ry="2" />
<text  x="317.83" y="207.5" ></text>
</g>
<g >
<title>runtime.mPark (143 samples, 10.58%)</title><rect x="820.5" y="293" width="124.9" height="15.0" fill="rgb(212,152,17)" rx="2" ry="2" />
<text  x="823.54" y="303.5" >runtime.mPark</text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*RequestHeader).parse (3 samples, 0.22%)</title><rect x="10.0" y="277" width="2.6" height="15.0" fill="rgb(250,40,6)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>syscall.write (197 samples, 14.58%)</title><rect x="322.7" y="245" width="172.1" height="15.0" fill="rgb(205,27,1)" rx="2" ry="2" />
<text  x="325.69" y="255.5" >syscall.write</text>
</g>
<g >
<title>runtime.freedefer (1 samples, 0.07%)</title><rect x="500.9" y="133" width="0.8" height="15.0" fill="rgb(241,142,25)" rx="2" ry="2" />
<text  x="503.87" y="143.5" ></text>
</g>
<g >
<title>github.com/gofiber/fiber/v2.(*App).AcquireCtx (1 samples, 0.07%)</title><rect x="494.8" y="293" width="0.8" height="15.0" fill="rgb(212,161,38)" rx="2" ry="2" />
<text  x="497.75" y="303.5" ></text>
</g>
<g >
<title>net.(*netFD).Write (199 samples, 14.73%)</title><rect x="320.9" y="277" width="173.9" height="15.0" fill="rgb(252,130,8)" rx="2" ry="2" />
<text  x="323.94" y="287.5" >net.(*netFD).Write</text>
</g>
<g >
<title>runtime.semasleep (143 samples, 10.58%)</title><rect x="820.5" y="261" width="124.9" height="15.0" fill="rgb(236,178,9)" rx="2" ry="2" />
<text  x="823.54" y="271.5" >runtime.semasleep</text>
</g>
<g >
<title>runtime.libcCall (3 samples, 0.22%)</title><rect x="316.6" y="197" width="2.6" height="15.0" fill="rgb(231,74,27)" rx="2" ry="2" />
<text  x="319.57" y="207.5" ></text>
</g>
<g >
<title>github.com/gofiber/fiber/v2.(*Ctx).Next (305 samples, 22.58%)</title><rect x="495.6" y="261" width="266.4" height="15.0" fill="rgb(212,150,3)" rx="2" ry="2" />
<text  x="498.63" y="271.5" >github.com/gofiber/fiber/v2.(*Ctx)...</text>
</g>
<g >
<title>runtime.(*randomEnum).next (2 samples, 0.15%)</title><rect x="776.9" y="293" width="1.7" height="15.0" fill="rgb(232,214,9)" rx="2" ry="2" />
<text  x="779.87" y="303.5" ></text>
</g>
<g >
<title>bytes.IndexByte (1 samples, 0.07%)</title><rect x="10.9" y="245" width="0.8" height="15.0" fill="rgb(226,147,0)" rx="2" ry="2" />
<text  x="13.87" y="255.5" ></text>
</g>
<g >
<title>runtime.goready.func1 (8 samples, 0.59%)</title><rect x="1183.0" y="341" width="7.0" height="15.0" fill="rgb(209,141,37)" rx="2" ry="2" />
<text  x="1186.01" y="351.5" ></text>
</g>
<g >
<title>runtime.mallocgc (2 samples, 0.15%)</title><rect x="499.1" y="85" width="1.8" height="15.0" fill="rgb(225,176,1)" rx="2" ry="2" />
<text  x="502.12" y="95.5" ></text>
</g>
<g >
<title>runtime.nanotime (2 samples, 0.15%)</title><rect x="1167.3" y="277" width="1.7" height="15.0" fill="rgb(225,45,23)" rx="2" ry="2" />
<text  x="1170.29" y="287.5" ></text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Request).URI (5 samples, 0.37%)</title><rect x="762.0" y="293" width="4.4" height="15.0" fill="rgb(248,161,41)" rx="2" ry="2" />
<text  x="765.02" y="303.5" ></text>
</g>
<g >
<title>runtime.semawakeup (48 samples, 3.55%)</title><rect x="778.6" y="245" width="41.9" height="15.0" fill="rgb(228,96,21)" rx="2" ry="2" />
<text  x="781.62" y="255.5" >run..</text>
</g>
<g >
<title>runtime.updateTimerPMask (1 samples, 0.07%)</title><rect x="1165.5" y="277" width="0.9" height="15.0" fill="rgb(212,90,48)" rx="2" ry="2" />
<text  x="1168.54" y="287.5" ></text>
</g>
<g >
<title>syscall.Write (197 samples, 14.58%)</title><rect x="322.7" y="261" width="172.1" height="15.0" fill="rgb(207,36,35)" rx="2" ry="2" />
<text  x="325.69" y="271.5" >syscall.Write</text>
</g>
<g >
<title>syscall.syscall (346 samples, 25.61%)</title><rect x="17.0" y="213" width="302.2" height="15.0" fill="rgb(207,207,36)" rx="2" ry="2" />
<text  x="19.99" y="223.5" >syscall.syscall</text>
</g>
<g >
<title>github.com/valyala/fasthttp.unescape (1 samples, 0.07%)</title><rect x="765.5" y="229" width="0.9" height="15.0" fill="rgb(253,27,32)" rx="2" ry="2" />
<text  x="768.51" y="239.5" ></text>
</g>
<g >
<title>main.handleRequest (305 samples, 22.58%)</title><rect x="495.6" y="229" width="266.4" height="15.0" fill="rgb(240,13,45)" rx="2" ry="2" />
<text  x="498.63" y="239.5" >main.handleRequest</text>
</g>
<g >
<title>github.com/valyala/fasthttp.(*Request).ContinueReadBody (1 samples, 0.07%)</title><rect x="766.4" y="293" width="0.9" height="15.0" fill="rgb(246,163,25)" rx="2" ry="2" />
<text  x="769.39" y="303.5" ></text>
</g>
<g >
<title>runtime.findrunnable (456 samples, 33.75%)</title><rect x="776.0" y="309" width="398.3" height="15.0" fill="rgb(219,127,22)" rx="2" ry="2" />
<text  x="779.00" y="319.5" >runtime.findrunnable</text>
</g>
</g>
</svg>
